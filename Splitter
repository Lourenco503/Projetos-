def calculate_split(total_amount,number_of_people,type_of_split,currency):

# checking if there's enough people to split the check
  if number_of_people <= 1:
      raise ValueError ("Number of people must be greater than 1.")
  print('--------------------------')
  print(f"Total expenses: {currency}{total_amount:,.2f}")
  print(f"Number of people:{number_of_people}")

  if type_of_split.lower() == "even":
      share_per_person = total_amount / number_of_people
      print(f"Each person should pay: {currency}{share_per_person:,.2f}")

  elif type_of_split.lower() == "uneven":
      shares = []
      for i in range(number_of_people):
          percentage = float(input(f"Enter the percentage (%) that person nº {i + 1} will pay: "))
          if percentage <= 0 :
              raise ValueError ("percentage has to be bigger than 0")
          shares.append(percentage)
      print('--------------------------')

      total_percentage = sum(shares)
      if total_percentage != 100:
       raise ValueError ("sum has to be 100%")

# enumerate = (i, percentage) it returns pairs of the index and the corresponding value
      for i, percentage in enumerate(shares):
            share = (percentage / 100) * total_amount
            print(f"Person {i + 1} should pay: {currency}{share:,.2f}")

#It's possible to do live templates
def main():
 try:
     total_amount = float(input(" What's the total of the bill? "))
     number_of_people = int(input(" Enter the number of people: "))
     type_of_split = str(input("Is it a even or uneven type of split? ")).strip().lower()

     calculate_split(total_amount, number_of_people, type_of_split, currency='€')
#Details on the error will be shown in the console
 except ValueError as e:
     print(f"Error: {e}")
     print("Please try again using a number!")
 #except Exception as e: will find even more exceptions and ive you the opportunity to fix them


if __name__ == '__main__':
    main()
